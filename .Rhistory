count()
rfm_table["r_score"]<-cut(rfm_table$recency, breaks=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
rfm_table["f_score"]<-cut(rfm_table$frequency, breaks=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
rfm_table["m_score"]<-cut(rfm_table$monetary_value, breaks=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, g = 5), labels = c(1:5))
install.packages("Hmisc")
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table["f_score"]<- factor(Hmisc::cut2(rfm_table$frequency, cuts=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["m_score"]<- factor(Hmisc::cut2(rfm_table$monetary_value, cuts=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
rfm_table %>% group_by(recency) %>%
count()
ggplot(data=rfm_table, aes(log(recency)))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
ggplot(data=rfm_table, aes(log(recency)))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(log(frequency)))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(log(monetary_value)))+
geom_histogram(aes(fill=m_score))
rfm_table["l_r_score"]<- factor(Hmisc::cut2(log(rfm_table$recency), cuts=c(quantile(log(rfm_table$recency), probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["l_f_score"]<- factor(Hmisc::cut2(log(rfm_table$frequency), cuts=c(quantile(log(rfm_table$frequency), probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["l_m_score"]<- factor(Hmisc::cut2(log(rfm_table$monetary_value), cuts=c(quantile(log(rfm_table$monetary_value), probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
l_rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(l_r_score) %>%
count()
rfm_table %>% group_by(l_f_score) %>%
count()
rfm_table %>% group_by(l_m_score) %>%
count()
ggplot(data=rfm_table, aes(log(monetary_value)))+
geom_histogram(aes(fill=m_score))
# merge rfm values and rename columns
rfm_table<-right_join(recency, number_transaction, by="person_id", )
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
# check minimum in recency
rfm_table %>%
drop_na(recency) %>%
summarise(min(recency))
# change na values to 0
rfm_table$recency[is.na(rfm_table$recency)]
# check if na removed and replaced with 0
rfm_table %>%
summarise(min(recency))
sum(is.na(rfm_table$recency))
summary(rfm_table)
# cut offers into quantile ranges of 5
quantile(rfm_table$recency, prob=c(0,0.2,0.4,0.6,0.8,1))
quantile(rfm_table$recency, prob=seq(0,1,0.1))
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
# merge transcript and profile with inner join to remove people aged 118
transcript_profile<-merge(transcript, profile, by.x="person_id", by.y="id")
dim(transcript)
dim(transcript_profile)
colnames(transcript_profile)
# check for duplicates
duplicates <- transcript_profile[duplicated(transcript_profile) |
duplicated(transcript_profile, fromLast = TRUE), ]
duplicates
# total monetary value column for every person
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
dim(profile)
dim(monetary_value)
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
# check if customers with no transactions removed
dim(profile)
dim(monetary_value)
dim(number_transaction)
dim(recency)
# merge rfm values and rename columns
rfm_table<-right_join(recency, number_transaction, by="person_id", )
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
# check minimum in recency
rfm_table %>%
drop_na(recency) %>%
summarise(min(recency))
# change na values to 0
rfm_table$recency[is.na(rfm_table$recency)]
# change na values to 0
rfm_table$recency[is.na(rfm_table$recency)]<-0
# check if na removed and replaced with 0
rfm_table %>%
summarise(min(recency))
sum(is.na(rfm_table$recency))
summary(rfm_table)
# cut offers into quantile ranges of 5
quantile(rfm_table$recency, prob=c(0,0.2,0.4,0.6,0.8,1))
quantile(rfm_table$recency, prob=seq(0,1,0.1))
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["f_score"]<- factor(Hmisc::cut2(rfm_table$frequency, cuts=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["m_score"]<- factor(Hmisc::cut2(rfm_table$monetary_value, cuts=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
# rfm_table["r_score"]<-cut(rfm_table$recency, breaks=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
# rfm_table["f_score"]<-cut(rfm_table$frequency, breaks=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
# rfm_table["m_score"]<-cut(rfm_table$monetary_value, breaks=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
c(1:5)
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
ggplot(data=rfm_table, aes(log(monetary_value)))+
geom_histogram(aes(fill=m_score))
rfm_table["rfm_string"]<-str(rfm_table$r_score)+str(rfm_table$f_score)+str(rfm_table$m_score)
rfm_table %>%
mutate(rfm_string=str(r_score)+str(f_score)+str(m_score),
rfm_score = r_score+f_score+m_score)
rfm_table
rfm_table %>%
mutate(rfm_string=paste(str(r_score),str(f_score),str(m_score)),
rfm_score = r_score+f_score+m_score)
rfm_table
rfm_table$r_score
paste(rfm_table$r_score[1],rfm_table$f_score[1],rfm_table$m_score[1])
rfm_table %>%
mutate(rfm_string=paste(r_score,f_score,m_score),
rfm_score = r_score+f_score+m_score)
rfm_table
rfm_table %>%
str_c(str(r_score),str(f_score),str(m_score))
rfm_table %>%
str_c(str(r_score),str(f_score),str(m_score)) %>%
mutate(rfm_string=str_c(str(r_score),str(f_score),str(m_score)),
rfm_score = r_score+f_score+m_score)
str(rscore)
str_c(rscore)
str_c(rfm_table$r_score)
str_c(rfm_table$r_score,rfm_table$f_score)
rfm_table %>%
str_c(str(r_score),str(f_score),str(m_score)) %>%
mutate(rfm_string=str_c(r_score,f_score,m_score),
rfm_score = r_score+f_score+m_score)
rfm_table
str_c(rfm_table$r_score,rfm_table$f_score,rfm_table$m_score)
rfm_table["rfm_string"]<-str_c(rfm_table$r_score,rfm_table$f_score,rfm_table$m_score)
rfm_table["rfm_score"]<-rfm_table$r_score+rfm_table$f_score+rfm_table$m_score
#rfm_table["rfm_score"]<-
int(rfm_table$r_score)+int(rfm_table$f_score)+int(rfm_table$m_score)
#rfm_table["rfm_score"]<-
integer(rfm_table$r_score)+integer(rfm_table$f_score)+integer(rfm_table$m_score)
#rfm_table["rfm_score"]<-
as.numeric(rfm_table$r_score)+as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
rfm_table["rfm_score"]<-as.numeric(rfm_table$r_score)+as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
rfm_table %>% group_by(rfm_string) %>%
count()
rfm_table %>% group_by(rfm_string) %>%
count() %>%
arrange(n)
rfm_table %>% group_by(rfm_string) %>%
count() %>%
arrange(desc(n))
rfm_table
transcript_profile
transcript_profile
transcript_profile.head()
head(transcript_profile)
rfm_table[c("rfm_string","rfm_score")]
merge(transcript_profile,rfm_table[c("rfm_string","rfm_score")], by="person_id")
rfm_table
merge(transcript_profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
transcript_profile<-merge(transcript_profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
ggplot(transcript_profile, aes(age,rfm_score))+
geom_point()
transcript_profile %>% group_by(oerson_id) %>% slice(1)
transcript_profile %>% group_by(person_id) %>% slice(1)
colnames(transcript_profile)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
ggplot(profile_new,aes(income, rfm_score))+
geom_point()
ggplot(profile_new,aes(income, rfm_score))+
geom_boxplot()
ggplot(profile_new,aes(income, rfm_score))+
geom_boxplot(fill=gender)
ggplot(profile_new,aes(income, rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(profile_new,aes(rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(profile_new,aes(rfm_score))+
geom_boxplot(aes(fill=age))
profile_new$age
min(profile_new$age)
max(profile_new$age)
cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))))
cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(rfm_score))+
geom_boxplot(aes(fill=age_factor))
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
profile_new
colnames(profile_new)
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
profile <- read.csv('profile.csv')
portfolio <- read.csv('portfolio.csv')
transcript <- read.csv('transcript.csv')
######### Looking at transaction amounts ########
amounts <- transcript |>
filter(transaction == 1) |>
select(amount)
summary(amounts)
# density plot of transaction amounts
ggplot(amounts)+
geom_density(aes(x=amount))
ggplot(amounts)+
geom_density(aes(x=log(amount)))
# Extracting the total, mean, max spend per customer
transactions <- transcript |>
filter(transaction==1) |>
group_by(person_id) |>
summarise(total_spend = sum(amount),
ave_spend = round(mean(amount),digits=2),
max_spend = max(amount)) |>
rename(id = person_id)
# adding the transaction data to the profile df
profile <- left_join(profile, transactions, by = 'id')
# Changing the na values in the transaction summaries to zeros
profile$total_spend[is.na(profile$total_spend)] <- 0
profile$ave_spend[is.na(profile$ave_spend)] <- 0
profile$max_spend[is.na(profile$max_spend)] <- 0
# dropping the X column
profile$X <- NULL
# Checking for any duplicate values of customer id
profile[duplicated(profile$id), ]
# dropping observations with age = 118
profile <- profile[profile$age!=118,]
# finding incomplete cases
profile[!complete.cases(profile),]
# looking at number of customers who did not spend any money
length(profile$total_spend[profile$total_spend==0])
# looking at number of customers who spent less than £1
length(profile$total_spend[profile$total_spend<1])
# creating tenure variable
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
summary(profile)
######### Visualizations ##########
# gender bar chart
ggplot(profile,aes(gender))+
geom_bar(aes(fill = gender))+
theme_classic()
# frequency polygons by gender
# age
ggplot(profile)+
geom_freqpoly(aes(age, color = gender),linewidth = 1)+
theme_classic()
# income
ggplot(profile)+
geom_freqpoly(aes(income, color = gender),linewidth = 1)+
theme_classic()
# tenure
ggplot(profile)+
geom_freqpoly(aes(tenure, color = gender),linewidth = 1)+
theme_classic()
# log(Total spend)
ggplot(profile)+
geom_freqpoly(aes(log(total_spend), color = gender),linewidth = 1)+
theme_classic()
# adding the transaction data to the profile df
profile <- left_join(profile, transactions, by = 'id')
# Changing the na values in the transaction summaries to zeros
profile$total_spend[is.na(profile$total_spend)] <- 0
profile$ave_spend[is.na(profile$ave_spend)] <- 0
profile$max_spend[is.na(profile$max_spend)] <- 0
# dropping the X column
profile$X <- NULL
# Checking for any duplicate values of customer id
profile[duplicated(profile$id), ]
# dropping observations with age = 118
profile <- profile[profile$age!=118,]
# finding incomplete cases
profile[!complete.cases(profile),]
# looking at number of customers who did not spend any money
length(profile$total_spend[profile$total_spend==0])
# looking at number of customers who spent less than £1
length(profile$total_spend[profile$total_spend<1])
# creating tenure variable
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
summary(profile)
######### Visualizations ##########
# gender bar chart
ggplot(profile,aes(gender))+
geom_bar(aes(fill = gender))+
theme_classic()
# frequency polygons by gender
# age
ggplot(profile)+
geom_freqpoly(aes(age, color = gender),linewidth = 1)+
theme_classic()
# income
ggplot(profile)+
geom_freqpoly(aes(income, color = gender),linewidth = 1)+
theme_classic()
# tenure
ggplot(profile)+
geom_freqpoly(aes(tenure, color = gender),linewidth = 1)+
theme_classic()
# log(Total spend)
ggplot(profile)+
geom_freqpoly(aes(log(total_spend), color = gender),linewidth = 1)+
theme_classic()
# log(Average spend)
ggplot(profile)+
geom_freqpoly(aes(log(ave_spend), color = gender),linewidth = 1)+
theme_classic()
# pairs plot
ggpairs(profile, columns = c('age', 'income', 'tenure', 'total_spend',
'ave_spend', 'max_spend') ,
aes(color = gender, alpha = 0.5))+
theme_classic()
# summary of transcript
summary(transcript)
str(transcript)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(profile_new,aes(y=rfm_score))+
geom_freqpoly(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
colnames(profile_new)
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
ggplot(profile_new, aes())
profile
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
colnames(profile)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
colnames(profile_new)
profile <- read.csv('profile.csv')
portfolio <- read.csv('portfolio.csv')
transcript <- read.csv('transcript.csv')
######### Looking at transaction amounts ########
amounts <- transcript |>
filter(transaction == 1) |>
select(amount)
summary(amounts)
# density plot of transaction amounts
ggplot(amounts)+
geom_density(aes(x=amount))
ggplot(amounts)+
geom_density(aes(x=log(amount)))
# Extracting the total, mean, max spend per customer
transactions <- transcript |>
filter(transaction==1) |>
group_by(person_id) |>
summarise(total_spend = sum(amount),
ave_spend = round(mean(amount),digits=2),
max_spend = max(amount)) |>
rename(id = person_id)
# adding the transaction data to the profile df
profile <- left_join(profile, transactions, by = 'id')
# Changing the na values in the transaction summaries to zeros
profile$total_spend[is.na(profile$total_spend)] <- 0
profile$ave_spend[is.na(profile$ave_spend)] <- 0
profile$max_spend[is.na(profile$max_spend)] <- 0
# dropping the X column
profile$X <- NULL
# Checking for any duplicate values of customer id
profile[duplicated(profile$id), ]
# dropping observations with age = 118
profile <- profile[profile$age!=118,]
# finding incomplete cases
profile[!complete.cases(profile),]
# looking at number of customers who did not spend any money
length(profile$total_spend[profile$total_spend==0])
# looking at number of customers who spent less than £1
length(profile$total_spend[profile$total_spend<1])
# creating tenure variable
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
summary(profile)
profile_new<-inner_join(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
colnames(profile_new)
#issue with merge
colnames(profile)
profile_new<-inner_join(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by.x="id", by.y="person_id")
#issue with merge
colnames(profile)
colnames(rfm_table)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by.x="id", by.y="person_id")
colnames(profile_new)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
ggplot(profile_new, aes())
ggplot(profile_new, aes(total_spend))+
geom_freqpoly()
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(col=age_factor)
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(aes(col=income_factor))
ggplot(profile_new, aes(average_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(average_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(ave_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(ave_spend))+
geom_freqpoly(aes(col=income_factor))
