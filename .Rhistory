data_wide <- full_join(profile, overall_summaries, by = 'person_id')
data_wide <- full_join(data_wide, summaries_by_offer, by = 'person_id')
data_wide <- cbind(data_wide, portfolio_wide_df)
# Dropping the observations with age = 118
data_wide <- data_wide[data_wide$age!=118,]
# checking duplicates
duplicates <- data_wide[duplicated(data_wide) |
duplicated(data_wide, fromLast = TRUE), ]
length(duplicates$person_id)     # no duplicates
all_periods_df2 <- all_periods_df2 |>
filter(Offer_num != 'no_offer') |>
group_by(person_id, Offer_num) |>
summarise(transactions = sum(off_trans),
amount = sum(off_amount)) |>
rename(offer_num = Offer_num)
# combining the transaction and amounts from all the periods
all_periods_df2 <-
bind_rows(p1,p2,p3,p4,p5,p6)
all_periods_df2 <- all_periods_df2 |>
filter(Offer_num != 'no_offer') |>
group_by(person_id, Offer_num) |>
summarise(transactions = sum(off_trans),
amount = sum(off_amount)) |>
rename(offer_num = Offer_num)
offer_summaries2 <- transcript2 |>
group_by(person_id, offer_num) |>
summarise(
off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec))
# dropping the transaction rows
offer_summaries2 <- offer_summaries2[complete.cases(offer_summaries2$offer_num), ]
trans_plus_offers <- full_join(all_periods_df2, offer_summaries2,
by = c('person_id', 'offer_num'))
overall_summaries2 <- transcript2 |>
group_by(person_id) |>
summarise(off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec),
transactions = sum(transaction),
amount = sum(amount)
)
overall_summaries2$offer_num <- 'total'
trans_plus_offers2 <- rbind(trans_plus_offers, overall_summaries2)
# merging offer and transactions with profile and portfolio data
data_long <- full_join(trans_plus_offers2, profile, by = 'person_id')
data_long <- full_join(data_long, portfolio, by = 'offer_num')
# Dropping the observations with age = 118
data_long <- data_long[data_long$age!=118,]
# saving combined dataframe as csv
write.csv(data_long, "data_long.csv", row.names = FALSE)
View(data_long)
=======
# frequency polygons by gender
# age
ggplot(profile)+
geom_freqpoly(aes(age, color = gender),linewidth = 1)+
theme_classic()
# income
ggplot(profile)+
geom_freqpoly(aes(income, color = gender),linewidth = 1)+
theme_classic()
# tenure
ggplot(profile)+
geom_freqpoly(aes(tenure, color = gender),linewidth = 1)+
theme_classic()
# log(Total spend)
ggplot(profile)+
geom_freqpoly(aes(log(total_spend), color = gender),linewidth = 1)+
theme_classic()
# adding the transaction data to the profile df
profile <- left_join(profile, transactions, by = 'id')
# Changing the na values in the transaction summaries to zeros
profile$total_spend[is.na(profile$total_spend)] <- 0
profile$ave_spend[is.na(profile$ave_spend)] <- 0
profile$max_spend[is.na(profile$max_spend)] <- 0
# dropping the X column
profile$X <- NULL
# Checking for any duplicate values of customer id
profile[duplicated(profile$id), ]
# dropping observations with age = 118
profile <- profile[profile$age!=118,]
# finding incomplete cases
profile[!complete.cases(profile),]
# looking at number of customers who did not spend any money
length(profile$total_spend[profile$total_spend==0])
# looking at number of customers who spent less than £1
length(profile$total_spend[profile$total_spend<1])
# creating tenure variable
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
summary(profile)
######### Visualizations ##########
# gender bar chart
ggplot(profile,aes(gender))+
geom_bar(aes(fill = gender))+
theme_classic()
# frequency polygons by gender
# age
ggplot(profile)+
geom_freqpoly(aes(age, color = gender),linewidth = 1)+
theme_classic()
# income
ggplot(profile)+
geom_freqpoly(aes(income, color = gender),linewidth = 1)+
theme_classic()
# tenure
ggplot(profile)+
geom_freqpoly(aes(tenure, color = gender),linewidth = 1)+
theme_classic()
# log(Total spend)
ggplot(profile)+
geom_freqpoly(aes(log(total_spend), color = gender),linewidth = 1)+
theme_classic()
# log(Average spend)
ggplot(profile)+
geom_freqpoly(aes(log(ave_spend), color = gender),linewidth = 1)+
theme_classic()
# pairs plot
ggpairs(profile, columns = c('age', 'income', 'tenure', 'total_spend',
'ave_spend', 'max_spend') ,
aes(color = gender, alpha = 0.5))+
theme_classic()
# summary of transcript
summary(transcript)
str(transcript)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(profile_new,aes(y=rfm_score))+
geom_freqpoly(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
colnames(profile_new)
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
ggplot(profile_new, aes())
profile
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
colnames(profile)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
colnames(profile_new)
profile <- read.csv('profile.csv')
portfolio <- read.csv('portfolio.csv')
<<<<<<< HEAD
transcript <- read.csv('transcript.csv')
######### Looking at transaction amounts ########
amounts <- transcript |>
filter(transaction == 1) |>
select(amount)
summary(amounts)
# density plot of transaction amounts
ggplot(amounts)+
geom_density(aes(x=amount))
ggplot(amounts)+
geom_density(aes(x=log(amount)))
# Extracting the total, mean, max spend per customer
transactions <- transcript |>
filter(transaction==1) |>
group_by(person_id) |>
summarise(total_spend = sum(amount),
ave_spend = round(mean(amount),digits=2),
max_spend = max(amount)) |>
rename(id = person_id)
# adding the transaction data to the profile df
profile <- left_join(profile, transactions, by = 'id')
# Changing the na values in the transaction summaries to zeros
profile$total_spend[is.na(profile$total_spend)] <- 0
profile$ave_spend[is.na(profile$ave_spend)] <- 0
profile$max_spend[is.na(profile$max_spend)] <- 0
# dropping the X column
profile$X <- NULL
# Checking for any duplicate values of customer id
profile[duplicated(profile$id), ]
# dropping observations with age = 118
profile <- profile[profile$age!=118,]
# finding incomplete cases
profile[!complete.cases(profile),]
# looking at number of customers who did not spend any money
length(profile$total_spend[profile$total_spend==0])
# looking at number of customers who spent less than £1
length(profile$total_spend[profile$total_spend<1])
# creating tenure variable
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
summary(profile)
profile_new<-inner_join(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
colnames(profile_new)
#issue with merge
colnames(profile)
profile_new<-inner_join(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by.x="id", by.y="person_id")
#issue with merge
colnames(profile)
colnames(rfm_table)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by.x="id", by.y="person_id")
colnames(profile_new)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
ggplot(profile_new, aes())
ggplot(profile_new, aes(total_spend))+
geom_freqpoly()
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(col=age_factor)
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(aes(col=income_factor))
ggplot(profile_new, aes(average_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(average_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(ave_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(ave_spend))+
geom_freqpoly(aes(col=income_factor))
=======
merge(offer_count, portfolio, by.x="offer_id", by.y="id")
# merge offer count with portfolio
offer_count<-merge(offer_count, portfolio, by.x="offer_id", by.y="id")
# merge offer count with portfolio
offer_count<-merge(offer_count, portfolio, by.x="offer_id", by.y="id")
offer_count
# dataframe of offer viewed and offer completed
offer_count<-transcript %>%
filter(offer_id != "") %>%
select(offer_id, offer_received, offer_viewed, offer_completed) %>%
group_by(offer_id) %>%
summarise(or_count=sum(offer_received),ov_count=sum(offer_viewed),oc_count=sum(offer_completed)) %>%
mutate(ov_perc=ov_count/or_count, oc_perc=oc_count/or_count)
offer_count
# # percentage offer viewed and offer completed
ggplot(data=offer_count, aes(ov_perc, oc_perc))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# merge offer count with portfolio
offer_count<-merge(offer_count, portfolio, by.x="offer_id", by.y="id")
offer_count
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=bogo))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=discount))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(bogo)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(discount)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(informational)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(bogo)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(discount)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(informational)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison difficulty
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)), size=2)+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)), size=3)+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison bogo
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(bogo)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison discount
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(discount)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison difficulty
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison difficulty
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty-reward)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
#######  RFM  #########
merge(transcript, profile, by.x="person_id", by.y="id")
#######  RFM  #########
transcript_profile<-merge(transcript, profile, by.x="person_id", by.y="id")
dim(transcript)
dim(transcript_profile)
View(transcript_profile)
View(transcript_profile)
total_transaction<-transcript_profile %>%
select(person_id,amount) %>%
group_by(person_id) %>%
summarise(total_transactions=sum(amount, na.rm = TRUE))
total_transaction
library(tidyverse)
library(magrittr)
library(GGally)
transcript_profile %>%
group_by("person_id") %>%
select(max_spend)
transcript_profile %>%
group_by(person_id) %>%
select(max_spend)
# total monetary value column for every person
colnames(transcript_profile)
transcript_profile %>%
group_by(person_id) %>%
select(max_spend)
transcript_profile %>%
group_by(person_id) %>%
select(max(max_spend))
transcript_profile %>%
group_by(person_id) %>%
summarise(max(max_spend))
transcript_profile %>%
group_by(person_id) %>%
summarise(min(max_spend))
transcript_profile %>%
group_by(person_id) %>%
slice(max_spend)
transcript_profile %>%
group_by(person_id) %>%
slice(1)
transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(max_spend)
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(max_spend)
# total monetary value column for every person
colnames(transcript_profile)
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,amount) %>%
drop_na() %>%
group_by(person_id) %>%
count()
number_transaction
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
number_transaction
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
recency
number_transaction
recency
number_transaction
library(tidyverse)
library(magrittr)
library(GGally)
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
number_transaction
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
recency
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
monetary_value
dim(profile)
dim(monetary_value)
dim(number_transaction)
dim(recency)
# merge rfm values and rename columns
merge(recency, number_transaction, by="person_id")
# merge rfm values and rename columns
right_join(recency, number_transaction, by="person_id", )
# merge rfm values and rename columns
rfm_table<-right_join(recency, number_transaction, by="person_id", )
inner_join(rfm_table, monterary_value, by="person_id")
inner_join(rfm_table, monetary_value, by="person_id")
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c("recency","frequency","monetary_value")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
head(rfm_table)
# check minimum in recency
min(rfm_table$recency)
# check minimum in recency
min(drop_na(rfm_table$recency))
# check minimum in recency
rfm_table %>%
drop_na(recency)
# check minimum in recency
rfm_table %>%
drop_na(recency) %>%
summarise(min(recency))
is.na(rfm_table$recency)
rfm_table[is.na(rfm_table$recency)]
rfm_table$recency[is.na(rfm_table$recency)]
rfm_table$recency[is.na(rfm_table$recency)]<-0
rfm_table %>%
summarise(min(recency))
sum(is.na(rfm_table$recency))
str(rfm_table)
summary(rfm_table)
>>>>>>> ca0826a3204a9e8ba6426e41ab962e5cb8e608c1
>>>>>>> a84ccf2df5e141c87dcd4eb1ffb5bba2ea1d3649
