ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
# check groups equally split
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
# check group split
rfm_table %>% group_by(rfm_string) %>%
count() %>%
arrange(desc(n))
rfm_table %>% group_by(fm_string) %>%
count() %>%
arrange(desc(n))
# check rfm, fm and r, f and m change with gender
ggplot(rfm_table,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
# check group split
rfm_table %>% group_by(rfm_string) %>%
count() %>%
arrange(desc(n))
rfm_table %>% group_by(fm_string) %>%
count() %>%
arrange(desc(n))
# function to create rfm table
make_rfm<-function(factors){
# create vector totalmoney spent
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
dplyr::select(total_spend)
# create vector frequecy of transactions
frequency<-transcript_profile %>%
dplyr::select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
# create vector recency of transactions
recency <- transcript_profile %>%
dplyr::select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
# join 3 columns (right join with recency as it loses people who don't have a transaction)
rfm_table<-right_join(recency, frequency, by="person_id")
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
# change colnames
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
# fill recency with 0 for people who have not had a transaction
rfm_table$recency[is.na(rfm_table$recency)]<-0
# create rfm values by creating factors based on number of breaks chosen in function
rfm_table["r_score"]<-factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
rfm_table["f_score"]<- factor(Hmisc::cut2(rfm_table$frequency, cuts=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
rfm_table["m_score"]<- factor(Hmisc::cut2(rfm_table$monetary_value, cuts=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
# create fm score and string adding f_score with m_score
rfm_table["fm_string"]<-str_c(rfm_table$f_score,rfm_table$m_score)
rfm_table["fm_score"]<-as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
# create rfm score and string adding r_score with f_score and m_score
rfm_table["rfm_string"]<-str_c(rfm_table$r_score,rfm_table$f_score,rfm_table$m_score)
rfm_table["rfm_score"]<-as.numeric(rfm_table$r_score)+as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
# return merge with profile data frame removing total spend asduplicated with monetary value
return(merge(profile,rfm_table, by.x="id", by.y="person_id") %>% select(-total_spend))
}
# create rfm table splitting into
rfm_table<-make_rfm(10)
# function to create rfm table
make_rfm<-function(factors){
# create vector totalmoney spent
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
dplyr::select(total_spend)
# create vector frequecy of transactions
frequency<-transcript_profile %>%
dplyr::select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
# create vector recency of transactions
recency <- transcript_profile %>%
dplyr::select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
# join 3 columns (right join with recency as it loses people who don't have a transaction)
rfm_table<-right_join(recency, frequency, by="person_id")
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
# change colnames
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
# fill recency with 0 for people who have not had a transaction
rfm_table$recency[is.na(rfm_table$recency)]<-0
# create rfm values by creating factors based on number of breaks chosen in function
rfm_table["r_score"]<-factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
rfm_table["f_score"]<- factor(Hmisc::cut2(rfm_table$frequency, cuts=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
rfm_table["m_score"]<- factor(Hmisc::cut2(rfm_table$monetary_value, cuts=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
# create fm score and string adding f_score with m_score
rfm_table["fm_string"]<-str_c(rfm_table$f_score,rfm_table$m_score)
rfm_table["fm_score"]<-as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
# create rfm score and string adding r_score with f_score and m_score
rfm_table["rfm_string"]<-str_c(rfm_table$r_score,rfm_table$f_score,rfm_table$m_score)
rfm_table["rfm_score"]<-as.numeric(rfm_table$r_score)+as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
# return merge with profile data frame removing total spend asduplicated with monetary value
return(merge(profile,rfm_table, by.x="id", by.y="person_id") %>% dplyr::select(-total_spend))
}
# create rfm table splitting into
rfm_table<-make_rfm(10)
rfm_table
# plot factor split
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
# check groups equally split
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
# check group split
rfm_table %>% group_by(rfm_string) %>%
count() %>%
arrange(desc(n))
rfm_table %>% group_by(fm_string) %>%
count() %>%
arrange(desc(n))
# check rfm, fm and r, f and m change with gender
ggplot(rfm_table,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(rfm_table,aes(y=fm_score))+
geom_boxplot(aes(fill=gender))
ggplot(rfm_table,aes(y=as.numeric(r_score)))+
geom_boxplot(aes(fill=gender))+
ylab("r_score")+
xlab("")+
theme_classic() +
theme_update(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplot(rfm_table,aes(y=as.numeric(f_score)))+
geom_boxplot(aes(fill=gender))+
ylab("f_score")+
xlab("")+
theme_classic() +
theme_update(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
# largest difference where malesaveragely spend less
ggplot(rfm_table,aes(y=as.numeric(m_score)))+
geom_boxplot(aes(fill=gender))+
ylab("m_score")+
xlab("")+
theme_classic() +
theme_update(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
# create age factor
summary(rfm_table$age)
age_factor<-cut(rfm_table$age, breaks=c(17, 29, 39, 49, 59, 69, 101))
age_label<-c('18-29', '30-39', '40-49', '50-59','60-69',"70+")
#plot changes in r, m, f with age
ggplot(rfm_table,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))+
scale_fill_discrete(labels=age_label)
ggplot(rfm_table,aes(y=fm_score))+
geom_boxplot(aes(fill=age_factor))+
scale_fill_discrete(labels=age_label)
ggplot(rfm_table,aes(y=as.numeric(r_score)))+
geom_boxplot(aes(fill=age_factor))+
scale_fill_discrete(labels=age_label)
# young people appear to be more frequent
ggplot(rfm_table,aes(y=as.numeric(f_score)))+
geom_boxplot(aes(fill=age_factor))+
scale_fill_discrete(labels=age_label)
#older people total spend is more
ggplot(rfm_table,aes(y=as.numeric(m_score)))+
geom_boxplot(aes(fill=age_factor))+
scale_fill_discrete(labels=age_label)
# check income range
quantile(rfm_table$income, by=c(0,0.25,.5,0.75,1))
# make income factor
income_factor<-cut(rfm_table$income,breaks=c(29999,39999,49999,59999,69999, 79999,89999,120000))
income_label<-c('$30000-$39999', '$40000-$49999', '$50000-$59999', '$60000-$69999',
'$70000-$79999','$80000-$89999','$90000-$120000')
# plot rfm_score compared to income
ggplot(rfm_table,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))+
scale_fill_discrete(labels=income_label)
ggplot(rfm_table,aes(y=fm_score))+
geom_boxplot(aes(fill=income_factor))+
scale_fill_discrete(labels=income_label)
ggplot(rfm_table,aes(y=as.numeric(r_score)))+
geom_boxplot(aes(fill=income_factor))+
scale_fill_discrete(labels=income_label)
# lower earners go more frequently
ggplot(rfm_table,aes(y=as.numeric(f_score)))+
geom_boxplot(aes(fill=income_factor))+
scale_fill_discrete(labels=income_label)
# higher earners spend larger amounts
ggplot(rfm_table,aes(y=as.numeric(m_score)))+
geom_boxplot(aes(fill=income_factor))+
scale_fill_discrete(labels=income_label)
# check if high spends are outliers
sort(rfm_table$monetary_value, decreasing=TRUE)[1:20]
# check if max spent are outliers
sort(rfm_table$max_spend, decreasing = TRUE)[1:20]
ggplot(data=rfm_table, aes(age, income))+
geom_point()
cor(rfm_table$age,rfm_table$income)
working_age_rfm<-rfm_table %>% filter(age<65)
cor(working_age_rfm$age, working_age_rfm$income)
working_age_rfm<-rfm_table %>% filter(age<60)
cor(working_age_rfm$age, working_age_rfm$income)
summary(income_factor)
summary(age_factor)
# Categorizing income into brackets --------------------------------------------
data_wide$income_bracket <- cut(data_wide$income,
breaks = c(-Inf, 32000, 64000, 96000, Inf),
labels = c("Low", "Medium", "High", "Very High"))
summary(data_wide$age_group)
# Categorizing income into brackets --------------------------------------------
data_wide$income_bracket <- cut(data_wide$income,
breaks = c(-Inf, 32000, 64000, 96000, Inf),
labels = c("Low", "Medium", "High", "Very High"))
summary(data_wide$income_bracket)
# 4. Customer Loyalty Variables ------------------------------------------------
# Convert membership_start to tenure in years
data_wide$membership_duration_years <- as.numeric(difftime(Sys.Date(), data_wide$membership_start, units="days")) / 365.25
summary(data_wide$membership_duration_years)
# 5. Composite Engagement Score ------------------------------------------------
data_wide$composite_engagement_score <- (data_wide$offer_view_rate + data_wide$offer_completion_rate + data_wide$average_spend_per_transaction) / 3
summary(data_wide$composite_engagement_score)
# 6. Offer-Type Preference  ----------------------------------------------------
# Initialize columns for response rates
data_wide$bogo_response_rate <- 0
data_wide$discount_response_rate <- 0
data_wide$informational_response_rate <- 0
# # Bogo offers
bogo_rec_cols <- grep("off_rec_offer[0-9]+", names(data_wide), value = TRUE)
bogo_comp_cols <- grep("off_comp_offer[0-9]+", names(data_wide), value = TRUE)
data_wide$bogo_response_rate <- rowSums(data_wide[, bogo_comp_cols], na.rm = TRUE) / rowSums(data_wide[, bogo_rec_cols], na.rm = TRUE)
# Discount offers
discount_rec_cols <- grep("off_rec_offer[0-9]+", names(data_wide), value = TRUE)
discount_comp_cols <- grep("off_comp_offer[0-9]+", names(data_wide), value = TRUE)
data_wide$discount_response_rate <- rowSums(data_wide[, discount_comp_cols], na.rm = TRUE) / rowSums(data_wide[, discount_rec_cols], na.rm = TRUE)
# Informational offers
informational_rec_cols <- grep("off_rec_offer[0-9]+", names(data_wide), value = TRUE)
informational_comp_cols <- grep("off_comp_offer[0-9]+", names(data_wide), value = TRUE) # Note: Informational offers may not have a 'completed' status in some contexts
data_wide$informational_response_rate <- rowSums(data_wide[, informational_comp_cols], na.rm = TRUE) / rowSums(data_wide[, informational_rec_cols], na.rm = TRUE)
# 7. Channel Effectiveness -----------------------------------------------------
channels <- c("email", "mobile", "social", "web")
for(channel in channels) {
channel_cols <- grep(paste0(channel, "_offer"), names(data_wide), value = TRUE)
comp_cols <- grep("off_comp_offer", names(data_wide), value = TRUE)
total_channel_used <- rowSums(data_wide[, channel_cols], na.rm = TRUE)
total_completed <- rowSums(data_wide[, comp_cols], na.rm = TRUE)
# Calculating effectiveness for each channel
data_wide[[paste0(channel, "_comp_rate")]] <- total_completed / total_channel_used
}
# 8. Promotion Interaction Rate ------------------------------------------------
data_wide$promotion_interaction_rate <- (data_wide$tot_off_view + data_wide$tot_off_comp) / data_wide$tot_off_rec
# 9. Promotion Conversion Rate -------------------------------------------------
data_wide$promotion_conversion_rate <- with(data_wide, ifelse(tot_off_view > 0, tot_off_comp / tot_off_view, 0))
## EDA #########################################################################
# Engagement Rate Variables Visualization --------------------------------------
# Offer View Rate
ggplot(data_wide, aes(x = offer_view_rate)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle("Offer View Rate Distribution")
# Offer Completion Rate
ggplot(data_wide, aes(x = offer_completion_rate)) +
geom_histogram(bins = 30, fill = "green", color = "black") +
ggtitle("Offer Completion Rate Distribution")
# View to Completion Rate
ggplot(data_wide, aes(x = view_to_completion_rate)) +
geom_histogram(bins = 30, fill = "red", color = "black") +
ggtitle("View to Completion Rate Distribution")
# Spending Behavior Visualization ----------------------------------------------
# Average Spend per Transaction
ggplot(data_wide, aes(x = average_spend_per_transaction)) +
geom_histogram(bins = 30, fill = "coral", color = "black") +
ggtitle("Average Spend per Transaction")
# Spend per Day
ggplot(data_wide, aes(x = spend_per_day)) +
geom_histogram(bins = 30, fill = "purple", color = "black") +
ggtitle("Spend per Day")
#  Demographic Interaction Visualization ---------------------------------------
# Age Group
ggplot(data_wide, aes(x = age_group)) +
geom_bar(fill = "skyblue") +
ggtitle("Customer Distribution by Age Group")
# Income Bracket
ggplot(data_wide, aes(x = income_bracket)) +
geom_bar(fill = "orange") +
ggtitle("Customer Distribution by Income Bracket")
# Customer Loyalty Visualization -----------------------------------------------
# Membership Duration in Years
ggplot(data_wide, aes(x = membership_duration_years)) +
geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
ggtitle("Membership Duration Distribution")
# Composite Engagement Score Visualization -------------------------------------
# Composite Engagement Score
ggplot(data_wide, aes(x = composite_engagement_score)) +
geom_histogram(bins = 30, fill = "pink", color = "black") +
ggtitle("Composite Engagement Score Distribution")
# Offer-Type Preference Visualization ------------------------------------------
offer_type_rates <- data.frame(
OfferType = c("BOGO", "Discount", "Informational"),
ResponseRate = c(mean(data_wide$bogo_response_rate, na.rm = TRUE),
mean(data_wide$discount_response_rate, na.rm = TRUE),
mean(data_wide$informational_response_rate, na.rm = TRUE))
)
# Plotting
ggplot(offer_type_rates, aes(x = OfferType, y = ResponseRate)) +
geom_bar(stat = "identity", fill = "dodgerblue") +
ggtitle("Response Rate by Offer Type")
4# Channel Effectiveness Visualization ------------------------------------------
channel_effectiveness <- data.frame(
Channel = c("Email", "Mobile", "Social", "Web"),
CompRate = c(mean(data_wide$email_comp_rate, na.rm = TRUE),
mean(data_wide$mobile_comp_rate, na.rm = TRUE),
mean(data_wide$social_comp_rate, na.rm = TRUE),
mean(data_wide$web_comp_rate, na.rm = TRUE))
)
# Plotting
ggplot(channel_effectiveness, aes(x = Channel, y = CompRate)) +
geom_bar(stat = "identity", fill = "tomato") +
ggtitle("Channel Effectiveness")
ggplot(data_wide, aes(x = promotion_interaction_rate)) +
geom_histogram(bins = 30, fill = "blue") +
labs(title = "Histogram of Promotion Interaction Rate", x = "Promotion Interaction Rate", y = "Frequency")
# Summary statistics
summary(data_wide$promotion_interaction_rate)
# Histogram of Promotion Conversion Rate
ggplot(data_wide, aes(x = promotion_conversion_rate)) +
geom_histogram(bins = 30, fill = "green") +
labs(title = "Histogram of Promotion Conversion Rate", x = "Promotion Conversion Rate", y = "Frequency")
# Summary statistics
summary(data_wide$promotion_conversion_rate)
# Boxplot for Promotion Interaction Rate
ggplot(data_wide, aes(y = promotion_interaction_rate)) +
geom_boxplot(fill = "blue") +
labs(title = "Boxplot of Promotion Interaction Rate")
# Boxplot for Promotion Conversion Rate
ggplot(data_wide, aes(y = promotion_conversion_rate)) +
geom_boxplot(fill = "green") +
labs(title = "Boxplot of Promotion Conversion Rate")
# interaction between variables ------------------------------------------------
ggplot(data_wide, aes(x = promotion_interaction_rate, y = promotion_conversion_rate)) +
geom_point(alpha = 0.5) +
labs(title = "Scatterplot of Interaction Rate vs Conversion Rate", x = "Promotion Interaction Rate", y = "Promotion Conversion Rate")
# Corrplot ---------------------------------------------------------------------
correlation_columns <- c('age', 'income', 'tenure', 'composite_engagement_score', 'bogo_response_rate',
'discount_response_rate', 'informational_response_rate', 'email_comp_rate',
'mobile_comp_rate', 'social_comp_rate', 'web_comp_rate','promotion_interaction_rate',
'promotion_conversion_rate')
# Compute the correlation matrix
correlation_matrix <- cor(data_wide[, correlation_columns], use="complete.obs")
# Visualize the correlation matrix using corrplot
corrplot(correlation_matrix, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45,
title = "Correlation Matrix",
tl.cex = 0.7, cl.cex = 0.7, cl.ratio = 0.3)
library(GGally)
ggpairs(data_wide[, sapply(data_wide, is.numeric)])
library(tidyverse)
colnames(data_wide)
data_wide %>% group_by(trans_offer1) %>%
count()
data_wide %>% group_by(trans_offer2) %>%
count()
summary(data_wide %>% select(amount_offer1,amount_offer2,
amount_offer3,amount_offer4,
amount_offer5,amount_offer6,
amount_offer7,amount_offer8,
amount_offer9,amount_offer10))
summary(data_wide %>% dplyr::select(amount_offer1,amount_offer2,
amount_offer3,amount_offer4,
amount_offer5,amount_offer6,
amount_offer7,amount_offer8,
amount_offer9,amount_offer10))
summary(data_wide %>% dplyr::select(trans_offer1,trans_offer2,
trans_offer3,trans_offer4,
trans_offer5,trans_offer6,
trans_offer7,trans_offer8,
trans_offer9,trans_offer10))
portfolio
income_factor<-cut(data_wide$income,breaks=c(29999,39999,49999,59999,69999, 79999,89999,120000))
data_wide2<-data_wide %>%
mutate(income_factor=cut(income,breaks=c(29999,39999,49999,59999,69999, 79999,89999,120000)),
age_factor=cut(age, breaks=c(17, 29, 39, 49, 59, 69, 101)))
age_fact_trans<-data_wide2 %>%
select(trans_offer1,trans_offer2,
trans_offer3,trans_offer4,
trans_offer5,trans_offer6,
trans_offer7,trans_offer8,
trans_offer9,trans_offer10,
age_factor, income_factor) %>%
group_by(age_factor) %>%
summarise(mean_trans1=mean(trans_offer1, na.rm=TRUE),mean_trans2=mean(trans_offer2, na.rm=TRUE),
mean_trans3=mean(trans_offer3, na.rm=TRUE),mean_trans4=mean(trans_offer4, na.rm=TRUE),
mean_trans5=mean(trans_offer5, na.rm=TRUE),mean_trans6=mean(trans_offer6, na.rm=TRUE),
mean_trans7=mean(trans_offer7, na.rm=TRUE),mean_trans8=mean(trans_offer8, na.rm=TRUE),
mean_trans9=mean(trans_offer9, na.rm=TRUE),mean_trans10=mean(trans_offer10, na.rm=TRUE))
age_fact_trans<-data_wide2 %>%
dplyr::select(trans_offer1,trans_offer2,
trans_offer3,trans_offer4,
trans_offer5,trans_offer6,
trans_offer7,trans_offer8,
trans_offer9,trans_offer10,
age_factor, income_factor) %>%
group_by(age_factor) %>%
summarise(mean_trans1=mean(trans_offer1, na.rm=TRUE),mean_trans2=mean(trans_offer2, na.rm=TRUE),
mean_trans3=mean(trans_offer3, na.rm=TRUE),mean_trans4=mean(trans_offer4, na.rm=TRUE),
mean_trans5=mean(trans_offer5, na.rm=TRUE),mean_trans6=mean(trans_offer6, na.rm=TRUE),
mean_trans7=mean(trans_offer7, na.rm=TRUE),mean_trans8=mean(trans_offer8, na.rm=TRUE),
mean_trans9=mean(trans_offer9, na.rm=TRUE),mean_trans10=mean(trans_offer10, na.rm=TRUE))
age_fact_amount<-data_wide2 %>%
dplyr::select(amount_offer1,amount_offer2,
amount_offer3,amount_offer4,
amount_offer5,amount_offer6,
amount_offer7,amount_offer8,
amount_offer9,amount_offer10,
age_factor, income_factor) %>%
group_by(age_factor) %>%
summarise(mean_amount1=mean(amount_offer1, na.rm=TRUE),mean_amount2=mean(amount_offer2, na.rm=TRUE),
mean_amount3=mean(amount_offer3, na.rm=TRUE),mean_amount4=mean(amount_offer4, na.rm=TRUE),
mean_amount5=mean(amount_offer5, na.rm=TRUE),mean_amount6=mean(amount_offer6, na.rm=TRUE),
mean_amount7=mean(amount_offer7, na.rm=TRUE),mean_amount8=mean(amount_offer8, na.rm=TRUE),
mean_amount9=mean(amount_offer9, na.rm=TRUE),mean_amount10=mean(amount_offer10, na.rm=TRUE))
income_fact_amount<-data_wide2 %>%
dplyr::select(amount_offer1,amount_offer2,
amount_offer3,amount_offer4,
amount_offer5,amount_offer6,
amount_offer7,amount_offer8,
amount_offer9,amount_offer10,
age_factor, income_factor) %>%
group_by(income_factor) %>%
summarise(mean_amount1=mean(amount_offer1, na.rm=TRUE),mean_amount2=mean(amount_offer2, na.rm=TRUE),
mean_amount3=mean(amount_offer3, na.rm=TRUE),mean_amount4=mean(amount_offer4, na.rm=TRUE),
mean_amount5=mean(amount_offer5, na.rm=TRUE),mean_amount6=mean(amount_offer6, na.rm=TRUE),
mean_amount7=mean(amount_offer7, na.rm=TRUE),mean_amount8=mean(amount_offer8, na.rm=TRUE),
mean_amount9=mean(amount_offer9, na.rm=TRUE),mean_amount10=mean(amount_offer10, na.rm=TRUE))
data_wide %>% group_by(tot_off_rec) %>%
summarise(min(tenure), max(tenure))
transcript<-read.csv("transcript.csv")
data_wide %>% filter(tot_off_rec==0) %>%
dplyr::select(person_id)
transcript %>% dplyr::filter(person_id %in% c("c6e579c6821c41d1a7a6a9cf936e91bb","eb540099db834cf59001f83a4561aef3",
"3a4874d8f0ef42b9a1b72294902afea9","ae8111e7e8cd4b60a8d35c42c1110555",
"12ede229379747bd8d74ccdc20097ca3")) %>%
summarise(min(time),max(time))
transcript %>% dplyr::filter(person_id %in% c("eb540099db834cf59001f83a4561aef3")) %>%
summarise(min(time),max(time))
data_wide %>% filter(tenure==min(tenure)) %>% dplyr::select(person_id)
transcript %>% filter(person_id %in% c("4e233f02eff840c7a3e5ec15d55d7d23") & transaction==1) %>%
summarise(min(time),max(time))
transcript %>% filter(person_id %in% c("fb75504a0e404549995a3e8427a2a252") & transaction==1) %>%
summarise(min(time),max(time))
data_wide2<-data_wide %>%
mutate(income_factor=cut(income,breaks=c(29999,39999,49999,59999,69999, 79999,89999,120000)),
age_factor=cut(age, breaks=c(17, 29, 39, 49, 59, 69, 101)))
age_fact_trans<-data_wide2 %>%
dplyr::select(trans_offer1,trans_offer2,
trans_offer3,trans_offer4,
trans_offer5,trans_offer6,
trans_offer7,trans_offer8,
trans_offer9,trans_offer10,
age_factor, income_factor) %>%
group_by(age_factor) %>%
summarise(mean_trans1=mean(trans_offer1, na.rm=TRUE),mean_trans2=mean(trans_offer2, na.rm=TRUE),
mean_trans3=mean(trans_offer3, na.rm=TRUE),mean_trans4=mean(trans_offer4, na.rm=TRUE),
mean_trans5=mean(trans_offer5, na.rm=TRUE),mean_trans6=mean(trans_offer6, na.rm=TRUE),
mean_trans7=mean(trans_offer7, na.rm=TRUE),mean_trans8=mean(trans_offer8, na.rm=TRUE),
mean_trans9=mean(trans_offer9, na.rm=TRUE),mean_trans10=mean(trans_offer10, na.rm=TRUE))
age_fact_trans
age_fact_amount
income_fact_amount
data_wide %>% group_by(tot_off_rec) %>%
summarise(min(tenure), max(tenure))
transcript<-read.csv("transcript.csv")
data_wide %>% filter(tot_off_rec==0) %>%
dplyr::select(person_id)
transcript %>% dplyr::filter(person_id %in% c("c6e579c6821c41d1a7a6a9cf936e91bb","eb540099db834cf59001f83a4561aef3",
"3a4874d8f0ef42b9a1b72294902afea9","ae8111e7e8cd4b60a8d35c42c1110555",
"12ede229379747bd8d74ccdc20097ca3")) %>%
summarise(min(time),max(time))
transcript %>% dplyr::filter(person_id %in% c("eb540099db834cf59001f83a4561aef3")) %>%
summarise(min(time),max(time))
data_wide %>% filter(tenure==min(tenure)) %>% dplyr::select(person_id)
transcript %>% filter(person_id %in% c("4e233f02eff840c7a3e5ec15d55d7d23") & transaction==1) %>%
summarise(min(time),max(time))
transcript %>% filter(person_id %in% c("fb75504a0e404549995a3e8427a2a252") & transaction==1) %>%
summarise(min(time),max(time))
data_wide %>% filter(tenure==max(tenure)) %>% dplyr::select(person_id)
transcript %>% filter(person_id %in% c("77388a70eaf14433b4efc5d01fa947bf") & transaction==1) %>%
summarise(min(time),max(time))
filter
data_wide %>% filter(tenure==min(tenure)) %>% dplyr::select(person_id)
transcript %>% filter(person_id %in% c("b65eaba56d124588aed15c484db427a8") & transaction==1) %>%
summarise(min(time),max(time))
transcript %>% filter(person_id %in% c("70f115dc7bf84a2ca3b1481639590f2b") & transaction==1) %>%
summarise(min(time),max(time))
min_tenure<-data_wide %>% filter(tenure==min(tenure)) %>% dplyr::select(person_id)
as.vector(min_tenure)
transcript %>% filter(person_id %in% as.vector(min_tenure) & transaction==1) %>%
summarise(min(time),max(time))
transcript %>% filter(person_id %in% as.vector(min_tenure) & transaction==1) %>%
summarise(max(time))
as.vector(min_tenure)
min_tenure$person_id
transcript %>% filter(person_id %in% min_tenure$person_id & transaction==1) %>%
summarise(min(time),max(time))
