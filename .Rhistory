<<<<<<< HEAD
count()
rfm_table["r_score"]<-cut(rfm_table$recency, breaks=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
rfm_table["f_score"]<-cut(rfm_table$frequency, breaks=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
rfm_table["m_score"]<-cut(rfm_table$monetary_value, breaks=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, g = 5), labels = c(1:5))
install.packages("Hmisc")
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table["f_score"]<- factor(Hmisc::cut2(rfm_table$frequency, cuts=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["m_score"]<- factor(Hmisc::cut2(rfm_table$monetary_value, cuts=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
rfm_table %>% group_by(recency) %>%
count()
ggplot(data=rfm_table, aes(log(recency)))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
ggplot(data=rfm_table, aes(log(recency)))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(log(frequency)))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(log(monetary_value)))+
geom_histogram(aes(fill=m_score))
rfm_table["l_r_score"]<- factor(Hmisc::cut2(log(rfm_table$recency), cuts=c(quantile(log(rfm_table$recency), probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["l_f_score"]<- factor(Hmisc::cut2(log(rfm_table$frequency), cuts=c(quantile(log(rfm_table$frequency), probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["l_m_score"]<- factor(Hmisc::cut2(log(rfm_table$monetary_value), cuts=c(quantile(log(rfm_table$monetary_value), probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
l_rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(l_r_score) %>%
count()
rfm_table %>% group_by(l_f_score) %>%
count()
rfm_table %>% group_by(l_m_score) %>%
count()
ggplot(data=rfm_table, aes(log(monetary_value)))+
geom_histogram(aes(fill=m_score))
# merge rfm values and rename columns
rfm_table<-right_join(recency, number_transaction, by="person_id", )
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
# check minimum in recency
rfm_table %>%
drop_na(recency) %>%
summarise(min(recency))
# change na values to 0
rfm_table$recency[is.na(rfm_table$recency)]
# check if na removed and replaced with 0
rfm_table %>%
summarise(min(recency))
sum(is.na(rfm_table$recency))
summary(rfm_table)
# cut offers into quantile ranges of 5
quantile(rfm_table$recency, prob=c(0,0.2,0.4,0.6,0.8,1))
quantile(rfm_table$recency, prob=seq(0,1,0.1))
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
# merge transcript and profile with inner join to remove people aged 118
transcript_profile<-merge(transcript, profile, by.x="person_id", by.y="id")
dim(transcript)
dim(transcript_profile)
colnames(transcript_profile)
# check for duplicates
duplicates <- transcript_profile[duplicated(transcript_profile) |
duplicated(transcript_profile, fromLast = TRUE), ]
duplicates
# total monetary value column for every person
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
dim(profile)
dim(monetary_value)
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
# check if customers with no transactions removed
dim(profile)
dim(monetary_value)
dim(number_transaction)
dim(recency)
# merge rfm values and rename columns
rfm_table<-right_join(recency, number_transaction, by="person_id", )
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
# check minimum in recency
rfm_table %>%
drop_na(recency) %>%
summarise(min(recency))
# change na values to 0
rfm_table$recency[is.na(rfm_table$recency)]
# change na values to 0
rfm_table$recency[is.na(rfm_table$recency)]<-0
# check if na removed and replaced with 0
rfm_table %>%
summarise(min(recency))
sum(is.na(rfm_table$recency))
summary(rfm_table)
# cut offers into quantile ranges of 5
quantile(rfm_table$recency, prob=c(0,0.2,0.4,0.6,0.8,1))
quantile(rfm_table$recency, prob=seq(0,1,0.1))
rfm_table["r_score"]<- factor(Hmisc::cut2(rfm_table$recency, cuts=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["f_score"]<- factor(Hmisc::cut2(rfm_table$frequency, cuts=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
rfm_table["m_score"]<- factor(Hmisc::cut2(rfm_table$monetary_value, cuts=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), g = 5), labels = c(1:5))
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
# rfm_table["r_score"]<-cut(rfm_table$recency, breaks=c(quantile(rfm_table$recency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
# rfm_table["f_score"]<-cut(rfm_table$frequency, breaks=c(quantile(rfm_table$frequency, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
# rfm_table["m_score"]<-cut(rfm_table$monetary_value, breaks=c(quantile(rfm_table$monetary_value, probs = seq(0, 1, by = 0.20))), labels=c(1,2,3,4,5))
c(1:5)
ggplot(data=rfm_table, aes(recency))+
geom_histogram(aes(fill=r_score))
ggplot(data=rfm_table, aes(frequency))+
geom_histogram(aes(fill=f_score))
ggplot(data=rfm_table, aes(monetary_value))+
geom_histogram(aes(fill=m_score))
rfm_table %>% group_by(r_score) %>%
count()
rfm_table %>% group_by(f_score) %>%
count()
rfm_table %>% group_by(m_score) %>%
count()
ggplot(data=rfm_table, aes(log(monetary_value)))+
geom_histogram(aes(fill=m_score))
rfm_table["rfm_string"]<-str(rfm_table$r_score)+str(rfm_table$f_score)+str(rfm_table$m_score)
rfm_table %>%
mutate(rfm_string=str(r_score)+str(f_score)+str(m_score),
rfm_score = r_score+f_score+m_score)
rfm_table
rfm_table %>%
mutate(rfm_string=paste(str(r_score),str(f_score),str(m_score)),
rfm_score = r_score+f_score+m_score)
rfm_table
rfm_table$r_score
paste(rfm_table$r_score[1],rfm_table$f_score[1],rfm_table$m_score[1])
rfm_table %>%
mutate(rfm_string=paste(r_score,f_score,m_score),
rfm_score = r_score+f_score+m_score)
rfm_table
rfm_table %>%
str_c(str(r_score),str(f_score),str(m_score))
rfm_table %>%
str_c(str(r_score),str(f_score),str(m_score)) %>%
mutate(rfm_string=str_c(str(r_score),str(f_score),str(m_score)),
rfm_score = r_score+f_score+m_score)
str(rscore)
str_c(rscore)
str_c(rfm_table$r_score)
str_c(rfm_table$r_score,rfm_table$f_score)
rfm_table %>%
str_c(str(r_score),str(f_score),str(m_score)) %>%
mutate(rfm_string=str_c(r_score,f_score,m_score),
rfm_score = r_score+f_score+m_score)
rfm_table
str_c(rfm_table$r_score,rfm_table$f_score,rfm_table$m_score)
rfm_table["rfm_string"]<-str_c(rfm_table$r_score,rfm_table$f_score,rfm_table$m_score)
rfm_table["rfm_score"]<-rfm_table$r_score+rfm_table$f_score+rfm_table$m_score
#rfm_table["rfm_score"]<-
int(rfm_table$r_score)+int(rfm_table$f_score)+int(rfm_table$m_score)
#rfm_table["rfm_score"]<-
integer(rfm_table$r_score)+integer(rfm_table$f_score)+integer(rfm_table$m_score)
#rfm_table["rfm_score"]<-
as.numeric(rfm_table$r_score)+as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
rfm_table["rfm_score"]<-as.numeric(rfm_table$r_score)+as.numeric(rfm_table$f_score)+as.numeric(rfm_table$m_score)
rfm_table %>% group_by(rfm_string) %>%
count()
rfm_table %>% group_by(rfm_string) %>%
count() %>%
arrange(n)
rfm_table %>% group_by(rfm_string) %>%
count() %>%
arrange(desc(n))
rfm_table
transcript_profile
transcript_profile
transcript_profile.head()
head(transcript_profile)
rfm_table[c("rfm_string","rfm_score")]
merge(transcript_profile,rfm_table[c("rfm_string","rfm_score")], by="person_id")
rfm_table
merge(transcript_profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
transcript_profile<-merge(transcript_profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
ggplot(transcript_profile, aes(age,rfm_score))+
geom_point()
transcript_profile %>% group_by(oerson_id) %>% slice(1)
transcript_profile %>% group_by(person_id) %>% slice(1)
colnames(transcript_profile)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
ggplot(profile_new,aes(income, rfm_score))+
geom_point()
ggplot(profile_new,aes(income, rfm_score))+
geom_boxplot()
ggplot(profile_new,aes(income, rfm_score))+
geom_boxplot(fill=gender)
ggplot(profile_new,aes(income, rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(profile_new,aes(rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(profile_new,aes(rfm_score))+
geom_boxplot(aes(fill=age))
profile_new$age
min(profile_new$age)
max(profile_new$age)
cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))))
cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(rfm_score))+
geom_boxplot(aes(fill=age_factor))
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
profile_new
colnames(profile_new)
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
profile <- read.csv('profile.csv')
portfolio <- read.csv('portfolio.csv')
=======
summarise(amount = sum(amount),
count = sum(transaction))
# getting times offers sent
offer_rec <- transcript2 |> filter(offer_received==1)
unique(offer_rec$time)
ggplot(offers_amount, aes(x=time)) +
geom_line(aes(y=amount), color= 'darkgreen')+
geom_line(aes(y=count*10), color = 'blue')+
scale_y_continuous(
name = "Amount",
sec.axis = sec_axis(~./10, name = "Count")
) +
geom_vline(xintercept = unique(offer_rec$time))+
theme_classic()
### There is a difference between transactions and amount,
# probably worth considering both at both
# checking that customers only receive one offer at a time
offers_cust <- transcript2 |>
filter(offer_received == 1) |>
group_by(person_id, time) |>
summarise(count = sum(offer_received))
max(offers_cust$count) ### people only get 1 offer at a time ###
# Checking for duplicate values in transcript
duplicates <- transcript2[duplicated(transcript2) |
duplicated(transcript2, fromLast = TRUE), ]
length(duplicates$person_id) # 793 duplicate rows
# removing duplicate rows
transcript2 <- unique(transcript2)
# Splitting DF into offer periods
period1 <- transcript2 |> filter(time < 168)
period2 <- transcript2 |> filter(time >= 168 & time < 336)
period3 <- transcript2 |> filter(time >= 336 & time < 408)
period4 <- transcript2 |> filter(time >= 408 & time < 504)
period5 <- transcript2 |> filter(time >= 504 & time < 576)
period6 <- transcript2 |> filter(time >= 576)
#looking at number of transactions per customer for each period
trans_per_cust <- function(X){
num_trans <- X |>
group_by(person_id) |>
summarise(num_trans = sum(transaction))
print(summary(num_trans$num_trans))
print(length(unique(X$person_id)))
hist(num_trans$num_trans, xlab = 'Number of transactions',
main = '')
}
trans_per_cust(period1)
trans_per_cust(period2)
trans_per_cust(period3)
trans_per_cust(period4)
trans_per_cust(period5)
trans_per_cust(period6)
################################################################################
# Creating summaries by person for each offer period
################################################################################
# function to link offers and transactions
offer_trans <- function(X){
x1 <- X |>         # linking offer numbers to transactions
filter(offer_received == 1) |>
mutate(Offer_num = offer_num,
Duration = duration) |>
select(person_id, Offer_num, Duration)
x2 <- left_join(X,x1, by = 'person_id')
x3 <- x2 |>        # linking completed offers to transactions
filter(offer_completed == 1) |>
mutate(Offer_completed = offer_completed) |>
select(person_id, Offer_completed)
x4 <- left_join(x2, x3, by = 'person_id')
x5 <- x4 |>        # linking viewed offers to transactions
filter(offer_viewed == 1) |>
mutate(Offer_viewed = offer_viewed) |>
select(person_id, Offer_viewed)
x6 <- left_join(x4, x5, by = 'person_id')
x6$Offer_completed <- x6$Offer_completed |> replace_na(0)
x6$Offer_viewed <- x6$Offer_viewed |> replace_na(0)
x6$Duration <- x6$Duration |> replace_na(0)
x6$Offer_num <- x6$Offer_num |> replace_na('no_offer')
x7 <- x6 |>
mutate(
# creating cols for transactions inside offers
off_trans =
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer1' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer2' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer3' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer4' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer5' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer6' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer7' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer8' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer9' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer10' , 1, 0),
# creating cols for amounts inside offers
off_amount =
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer1', amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer2', amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer3' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer4' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer5' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer6' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer7' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer8' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer9' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer10' , amount, 0)
)
return(x7)
}
p1 <- offer_trans(period1)
p2 <- offer_trans(period2)
p3 <- offer_trans(period3)
p4 <- offer_trans(period4)
p5 <- offer_trans(period5)
p6 <- offer_trans(period6)
all_periods_df2 <-
bind_rows(p1,p2,p3,p4,p5,p6)
# combining the transaction and amounts from all the periods
all_periods_df2 <- all_periods_df2 |>
filter(Offer_num != 'no_offer') |>
group_by(person_id, Offer_num) |>
summarise(transactions = sum(off_trans),
amount = sum(off_amount)) |>
rename(offer_num = Offer_num)
offer_summaries2 <- transcript2 |>
group_by(person_id, offer_num) |>
summarise(
off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec))
# droping the transaction rows
offer_summaries2 <- offer_summaries2[complete.cases(offer_summaries2$offer_num), ]
trans_plus_offers <- full_join(all_periods_df2, offer_summaries2,
by = c('person_id', 'offer_num'))
overall_summaries2 <- transcript2 |>
group_by(person_id) |>
summarise(off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec),
transactions = sum(transaction),
amount = sum(amount)
)
View(all_periods_df2)
View(trans_plus_offers)
overall_summaries2$offer_num <- 'total'
View(offer_summaries2)
overall_summaries2 <- transcript2 |>
group_by(person_id) |>
summarise(off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec),
transactions = sum(transaction),
amount = sum(amount)
)
View(transcript2)
overall_summaries2 <- transcript2 |>
group_by(person_id) |>
summarise(off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec),
transactions = sum(transaction),
amount = sum(amount)
)
View(overall_summaries2)
overall_summaries2$offer_num <- 'total'
trans_plus_offers2 <- full_join(trans_plus_offers, overall_summaries2,
by = c('person_id'))
View(trans_plus_offers2)
trans_plus_offers2 <- cbind(trans_plus_offers, overall_summaries2)
trans_plus_offers2 <- rbind(trans_plus_offers, overall_summaries2)
data_long <- full_join(trans_plus_offers2, profile, by = 'person_id')
View(data_long)
View(portfolio)
data_long <- full_join(data_long, portfolio, by = 'offer_num')
# Dropping the observations with age = 118
data_long <- data_long[data_long$age!=118,]
# saving combined dataframe as csv
write.csv(data_long, "data_long.csv", row.names = FALSE)
library(tidyverse)
library(magrittr)
library(GGally)
################################################################################
# loading data and preliminary wrangling
################################################################################
>>>>>>> a84ccf2df5e141c87dcd4eb1ffb5bba2ea1d3649
transcript <- read.csv('transcript.csv')
portfolio <- read.csv('portfolio.csv')
profile <- read.csv('profile.csv')
# dropping the X columns in the csv files
transcript$X <- NULL
portfolio$X <- NULL
profile$X <- NULL
# creating tenure variable using membership start date
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
# Changing the column names for id and reward
colnames(profile)[colnames(profile) == 'id'] <- 'person_id'
colnames(portfolio)[colnames(portfolio) == 'id'] <- 'offer_id'
colnames(portfolio)[colnames(portfolio) == 'reward'] <- 'reward_off'
colnames(transcript)[colnames(transcript) == 'reward'] <- 'reward_rec'
# Adding duration and offer number to transcript to be used in matching offers
# and transactions
# Creating an additional column for the portfolio df to indicate offer number as
# The offer id is hard to use
portfolio$offer_num <- c('offer1', 'offer2', 'offer3', 'offer4', 'offer5',
'offer6', 'offer7','offer8', 'offer9', 'offer10')
# changing the offer duration to hours to match the transcript df
portfolio$duration <- portfolio$duration*24
# Changing the NA values in reward and amount to zero
transcript$reward_rec[is.na(transcript$reward_rec)] <- 0
transcript$amount[is.na(transcript$amount)] <- 0
# Joining some of the columns from portfolio to transcript to help with matching
# transactions and offers
transcript2 <- left_join(
transcript, portfolio[,c('offer_id','duration', 'offer_num')], by = 'offer_id')
################################################################################
# looking at the separate offer periods
################################################################################
# Creating plot of daily transaction amount and counts with offers
offers_amount <- transcript2 |>
filter(transaction ==1) |>
group_by(time) |>
summarise(amount = sum(amount),
count = sum(transaction))
# getting times offers sent
offer_rec <- transcript2 |> filter(offer_received==1)
unique(offer_rec$time)
ggplot(offers_amount, aes(x=time)) +
geom_line(aes(y=amount), color= 'darkgreen')+
geom_line(aes(y=count*10), color = 'blue')+
scale_y_continuous(
name = "Amount",
sec.axis = sec_axis(~./10, name = "Count")
) +
geom_vline(xintercept = unique(offer_rec$time))+
theme_classic()
<<<<<<< HEAD
### There is a difference between transactions and amount,
# probably worth considering both at both
# checking that customers only receive one offer at a time
offers_cust <- transcript2 |>
filter(offer_received == 1) |>
group_by(person_id, time) |>
summarise(count = sum(offer_received))
max(offers_cust$count) ### people only get 1 offer at a time ###
# Checking for duplicate values in transcript
duplicates <- transcript2[duplicated(transcript2) |
duplicated(transcript2, fromLast = TRUE), ]
length(duplicates$person_id) # 793 duplicate rows
# removing duplicate rows
transcript2 <- unique(transcript2)
# Splitting DF into offer periods
period1 <- transcript2 |> filter(time < 168)
period2 <- transcript2 |> filter(time >= 168 & time < 336)
period3 <- transcript2 |> filter(time >= 336 & time < 408)
period4 <- transcript2 |> filter(time >= 408 & time < 504)
period5 <- transcript2 |> filter(time >= 504 & time < 576)
period6 <- transcript2 |> filter(time >= 576)
#looking at number of transactions per customer for each period
trans_per_cust <- function(X){
num_trans <- X |>
group_by(person_id) |>
summarise(num_trans = sum(transaction))
print(summary(num_trans$num_trans))
print(length(unique(X$person_id)))
hist(num_trans$num_trans, xlab = 'Number of transactions',
main = '')
}
trans_per_cust(period1)
trans_per_cust(period2)
trans_per_cust(period3)
trans_per_cust(period4)
trans_per_cust(period5)
trans_per_cust(period6)
################################################################################
# Creating summaries by person for each offer period
################################################################################
# function to link offers and transactions
offer_trans <- function(X){
x1 <- X |>         # linking offer numbers to transactions
filter(offer_received == 1) |>
mutate(Offer_num = offer_num,
Duration = duration) |>
select(person_id, Offer_num, Duration)
x2 <- left_join(X,x1, by = 'person_id')
x3 <- x2 |>        # linking completed offers to transactions
filter(offer_completed == 1) |>
mutate(Offer_completed = offer_completed) |>
select(person_id, Offer_completed)
x4 <- left_join(x2, x3, by = 'person_id')
x5 <- x4 |>        # linking viewed offers to transactions
filter(offer_viewed == 1) |>
mutate(Offer_viewed = offer_viewed) |>
select(person_id, Offer_viewed)
x6 <- left_join(x4, x5, by = 'person_id')
x6$Offer_completed <- x6$Offer_completed |> replace_na(0)
x6$Offer_viewed <- x6$Offer_viewed |> replace_na(0)
x6$Duration <- x6$Duration |> replace_na(0)
x6$Offer_num <- x6$Offer_num |> replace_na('no_offer')
x7 <- x6 |>
mutate(
# creating cols for transactions inside offers
off_trans =
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer1' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer2' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer3' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer4' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer5' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer6' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer7' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer8' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer9' , 1, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer10' , 1, 0),
# creating cols for amounts inside offers
off_amount =
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer1', amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer2', amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer3' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer4' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer5' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer6' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer7' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_viewed == 1 & Offer_num == 'offer8' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer9' , amount, 0) +
ifelse(transaction == 1 & time <= (Duration+min(time)) &
Offer_completed == 1 & Offer_num == 'offer10' , amount, 0)
)
return(x7)
}
p1 <- offer_trans(period1)
p2 <- offer_trans(period2)
p3 <- offer_trans(period3)
p4 <- offer_trans(period4)
p5 <- offer_trans(period5)
p6 <- offer_trans(period6)
all_periods_df <-
bind_rows(p1,p2,p3,p4,p5,p6)
# combining the transaction and amounts from all the periods
all_periods_df <- all_periods_df |>
filter(Offer_num != 'no_offer') |>
group_by(person_id, Offer_num) |>
summarise(off_trans = sum(off_trans),
off_amount = sum(off_amount))
# Creating a df with offer transactions in wide format
all_trans <- all_periods_df |>
pivot_wider(id_cols = person_id,
names_from = Offer_num,
values_from = off_trans,
names_prefix = 'trans_',
values_fill = 0
)
# Creating a df with offer amounts in wide format
all_ammounts <- all_periods_df |>
pivot_wider(id_cols = person_id,
names_from = Offer_num,
values_from = off_amount,
names_prefix = 'amount_',
values_fill = 0
)
# Joining the the transactions and amounts
trans_by_offer <- left_join(all_trans, all_ammounts, by='person_id')
# Checking for duplicates in trans_by_offer DF
dups <- trans_by_offer[duplicated(trans_by_offer) |
duplicated(trans_by_offer, fromLast = TRUE), ]
length(dups$person_id) ## no duplicates
################################################################################
# getting the offer summaries for each offer
################################################################################
offer_summaries <- transcript2 |>
group_by(person_id, offer_num) |>
summarise(
off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
tot_reward = sum(reward_rec))
# droping the transaction rows
offer_summaries <- offer_summaries[complete.cases(offer_summaries$offer_num), ]
# creating a wide format
offer_summaries <- offer_summaries |>
pivot_wider(id_cols = person_id,
names_from = offer_num,
values_from = c(off_rec, off_view, off_comp, tot_reward),
values_fill = 0)
################################################################################
# combining the offer summaries and transaction summaries for each offer
################################################################################
summaries_by_offer <- full_join(offer_summaries, trans_by_offer, by = 'person_id')
names(summaries_by_offer)
length(summaries_by_offer$person_id)
################################################################################
# getting overall offer and transaction totals
################################################################################
overall_summaries <- transcript2 |>
group_by(person_id) |>
summarise(tot_off_rec = sum(offer_received),
tot_off_view = sum(offer_viewed),
tot_off_comp = sum(offer_completed),
tot_reward = sum(reward_rec),
tot_trans = sum(transaction),
tot_amount = sum(amount),
ave_amount = round(mean(amount),digits=2),
max_amount = max(amount))
################################################################################
# Getting the portfolio data in wide format
################################################################################
names(portfolio)
portfolio_wide <- portfolio |>
pivot_wider(
id_cols = offer_id,
names_from = offer_num,
values_from = c(reward_off, difficulty, duration, bogo, discount,
informational, email, mobile, social, web),
values_fill = 0
)
portfolio_wide_df <- t(data.frame(colSums(portfolio_wide[, -1])))
rownames(portfolio_wide_df) <- NULL
################################################################################
# Joining the dataframes
################################################################################
data_wide <- full_join(profile, overall_summaries, by = 'person_id')
data_wide <- full_join(data_wide, summaries_by_offer, by = 'person_id')
data_wide <- cbind(data_wide, portfolio_wide_df)
# Dropping the observations with age = 118
data_wide <- data_wide[data_wide$age!=118,]
# checking duplicates
duplicates <- data_wide[duplicated(data_wide) |
duplicated(data_wide, fromLast = TRUE), ]
length(duplicates$person_id)     # no duplicates
all_periods_df2 <- all_periods_df2 |>
filter(Offer_num != 'no_offer') |>
group_by(person_id, Offer_num) |>
summarise(transactions = sum(off_trans),
amount = sum(off_amount)) |>
rename(offer_num = Offer_num)
# combining the transaction and amounts from all the periods
all_periods_df2 <-
bind_rows(p1,p2,p3,p4,p5,p6)
all_periods_df2 <- all_periods_df2 |>
filter(Offer_num != 'no_offer') |>
group_by(person_id, Offer_num) |>
summarise(transactions = sum(off_trans),
amount = sum(off_amount)) |>
rename(offer_num = Offer_num)
offer_summaries2 <- transcript2 |>
group_by(person_id, offer_num) |>
summarise(
off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec))
# dropping the transaction rows
offer_summaries2 <- offer_summaries2[complete.cases(offer_summaries2$offer_num), ]
trans_plus_offers <- full_join(all_periods_df2, offer_summaries2,
by = c('person_id', 'offer_num'))
overall_summaries2 <- transcript2 |>
group_by(person_id) |>
summarise(off_rec = sum(offer_received),
off_view = sum(offer_viewed),
off_comp = sum(offer_completed),
reward = sum(reward_rec),
transactions = sum(transaction),
amount = sum(amount)
)
overall_summaries2$offer_num <- 'total'
trans_plus_offers2 <- rbind(trans_plus_offers, overall_summaries2)
# merging offer and transactions with profile and portfolio data
data_long <- full_join(trans_plus_offers2, profile, by = 'person_id')
data_long <- full_join(data_long, portfolio, by = 'offer_num')
# Dropping the observations with age = 118
data_long <- data_long[data_long$age!=118,]
# saving combined dataframe as csv
write.csv(data_long, "data_long.csv", row.names = FALSE)
View(data_long)
=======
# frequency polygons by gender
# age
ggplot(profile)+
geom_freqpoly(aes(age, color = gender),linewidth = 1)+
theme_classic()
# income
ggplot(profile)+
geom_freqpoly(aes(income, color = gender),linewidth = 1)+
theme_classic()
# tenure
ggplot(profile)+
geom_freqpoly(aes(tenure, color = gender),linewidth = 1)+
theme_classic()
# log(Total spend)
ggplot(profile)+
geom_freqpoly(aes(log(total_spend), color = gender),linewidth = 1)+
theme_classic()
# adding the transaction data to the profile df
profile <- left_join(profile, transactions, by = 'id')
# Changing the na values in the transaction summaries to zeros
profile$total_spend[is.na(profile$total_spend)] <- 0
profile$ave_spend[is.na(profile$ave_spend)] <- 0
profile$max_spend[is.na(profile$max_spend)] <- 0
# dropping the X column
profile$X <- NULL
# Checking for any duplicate values of customer id
profile[duplicated(profile$id), ]
# dropping observations with age = 118
profile <- profile[profile$age!=118,]
# finding incomplete cases
profile[!complete.cases(profile),]
# looking at number of customers who did not spend any money
length(profile$total_spend[profile$total_spend==0])
# looking at number of customers who spent less than £1
length(profile$total_spend[profile$total_spend<1])
# creating tenure variable
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
summary(profile)
######### Visualizations ##########
# gender bar chart
ggplot(profile,aes(gender))+
geom_bar(aes(fill = gender))+
theme_classic()
# frequency polygons by gender
# age
ggplot(profile)+
geom_freqpoly(aes(age, color = gender),linewidth = 1)+
theme_classic()
# income
ggplot(profile)+
geom_freqpoly(aes(income, color = gender),linewidth = 1)+
theme_classic()
# tenure
ggplot(profile)+
geom_freqpoly(aes(tenure, color = gender),linewidth = 1)+
theme_classic()
# log(Total spend)
ggplot(profile)+
geom_freqpoly(aes(log(total_spend), color = gender),linewidth = 1)+
theme_classic()
# log(Average spend)
ggplot(profile)+
geom_freqpoly(aes(log(ave_spend), color = gender),linewidth = 1)+
theme_classic()
# pairs plot
ggpairs(profile, columns = c('age', 'income', 'tenure', 'total_spend',
'ave_spend', 'max_spend') ,
aes(color = gender, alpha = 0.5))+
theme_classic()
# summary of transcript
summary(transcript)
str(transcript)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
ggplot(profile_new,aes(y=rfm_score))+
geom_freqpoly(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
colnames(profile_new)
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
ggplot(profile_new, aes())
profile
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
profile_new
colnames(profile)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
colnames(profile_new)
profile <- read.csv('profile.csv')
portfolio <- read.csv('portfolio.csv')
<<<<<<< HEAD
transcript <- read.csv('transcript.csv')
######### Looking at transaction amounts ########
amounts <- transcript |>
filter(transaction == 1) |>
select(amount)
summary(amounts)
# density plot of transaction amounts
ggplot(amounts)+
geom_density(aes(x=amount))
ggplot(amounts)+
geom_density(aes(x=log(amount)))
# Extracting the total, mean, max spend per customer
transactions <- transcript |>
filter(transaction==1) |>
group_by(person_id) |>
summarise(total_spend = sum(amount),
ave_spend = round(mean(amount),digits=2),
max_spend = max(amount)) |>
rename(id = person_id)
# adding the transaction data to the profile df
profile <- left_join(profile, transactions, by = 'id')
# Changing the na values in the transaction summaries to zeros
profile$total_spend[is.na(profile$total_spend)] <- 0
profile$ave_spend[is.na(profile$ave_spend)] <- 0
profile$max_spend[is.na(profile$max_spend)] <- 0
# dropping the X column
profile$X <- NULL
# Checking for any duplicate values of customer id
profile[duplicated(profile$id), ]
# dropping observations with age = 118
profile <- profile[profile$age!=118,]
# finding incomplete cases
profile[!complete.cases(profile),]
# looking at number of customers who did not spend any money
length(profile$total_spend[profile$total_spend==0])
# looking at number of customers who spent less than £1
length(profile$total_spend[profile$total_spend<1])
# creating tenure variable
profile$tenure <- as.integer(
difftime(max(profile$membership_start),
profile$membership_start, unit = 'days')+1
)
summary(profile)
profile_new<-inner_join(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by="person_id")
colnames(profile_new)
#issue with merge
colnames(profile)
profile_new<-inner_join(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by.x="id", by.y="person_id")
#issue with merge
colnames(profile)
colnames(rfm_table)
profile_new<-merge(profile,rfm_table[c("person_id","rfm_string","rfm_score")], by.x="id", by.y="person_id")
colnames(profile_new)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=gender))
age_factor<-cut(profile_new$age,probs=c(quantile(profile_new$age, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=age_factor))
income_factor<-cut(profile_new$income,probs=c(quantile(profile_new$income, by=c(0,0.25,.5,0.75,1))), breaks=4)
ggplot(profile_new,aes(y=rfm_score))+
geom_boxplot(aes(fill=income_factor))
ggplot(profile_new, aes())
ggplot(profile_new, aes(total_spend))+
geom_freqpoly()
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(col=age_factor)
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(total_spend))+
geom_freqpoly(aes(col=income_factor))
ggplot(profile_new, aes(average_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(average_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(ave_spend))+
geom_freqpoly(aes(col=age_factor))
ggplot(profile_new, aes(ave_spend))+
geom_freqpoly(aes(col=income_factor))
=======
merge(offer_count, portfolio, by.x="offer_id", by.y="id")
# merge offer count with portfolio
offer_count<-merge(offer_count, portfolio, by.x="offer_id", by.y="id")
# merge offer count with portfolio
offer_count<-merge(offer_count, portfolio, by.x="offer_id", by.y="id")
offer_count
# dataframe of offer viewed and offer completed
offer_count<-transcript %>%
filter(offer_id != "") %>%
select(offer_id, offer_received, offer_viewed, offer_completed) %>%
group_by(offer_id) %>%
summarise(or_count=sum(offer_received),ov_count=sum(offer_viewed),oc_count=sum(offer_completed)) %>%
mutate(ov_perc=ov_count/or_count, oc_perc=oc_count/or_count)
offer_count
# # percentage offer viewed and offer completed
ggplot(data=offer_count, aes(ov_perc, oc_perc))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# merge offer count with portfolio
offer_count<-merge(offer_count, portfolio, by.x="offer_id", by.y="id")
offer_count
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=bogo))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=discount))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(bogo)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(discount)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(informational)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(bogo)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(discount)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(informational)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison difficulty
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)))+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)), size=2)+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)), size=3)+
geom_point()+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison bogo
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(bogo)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison discount
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(discount)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison difficulty
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(reward)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison difficulty
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
# offers viewed and completed comparison reward
ggplot(data=offer_count, aes(ov_perc, oc_perc, col=factor(difficulty-reward)))+
geom_point(size=3)+
geom_abline(slope=1,intercept=0)+
xlim(c(0,1))+
ylim(c(0,1))
#######  RFM  #########
merge(transcript, profile, by.x="person_id", by.y="id")
#######  RFM  #########
transcript_profile<-merge(transcript, profile, by.x="person_id", by.y="id")
dim(transcript)
dim(transcript_profile)
View(transcript_profile)
View(transcript_profile)
total_transaction<-transcript_profile %>%
select(person_id,amount) %>%
group_by(person_id) %>%
summarise(total_transactions=sum(amount, na.rm = TRUE))
total_transaction
library(tidyverse)
library(magrittr)
library(GGally)
transcript_profile %>%
group_by("person_id") %>%
select(max_spend)
transcript_profile %>%
group_by(person_id) %>%
select(max_spend)
# total monetary value column for every person
colnames(transcript_profile)
transcript_profile %>%
group_by(person_id) %>%
select(max_spend)
transcript_profile %>%
group_by(person_id) %>%
select(max(max_spend))
transcript_profile %>%
group_by(person_id) %>%
summarise(max(max_spend))
transcript_profile %>%
group_by(person_id) %>%
summarise(min(max_spend))
transcript_profile %>%
group_by(person_id) %>%
slice(max_spend)
transcript_profile %>%
group_by(person_id) %>%
slice(1)
transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(max_spend)
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(max_spend)
# total monetary value column for every person
colnames(transcript_profile)
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,amount) %>%
drop_na() %>%
group_by(person_id) %>%
count()
number_transaction
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
number_transaction
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
recency
number_transaction
recency
number_transaction
library(tidyverse)
library(magrittr)
library(GGally)
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
# total frequency column for every person
number_transaction<-transcript_profile %>%
select(person_id,transaction) %>%
group_by(person_id) %>%
summarise(sum(transaction))
number_transaction
# recency column
recency <- transcript_profile %>%
select(person_id,time, transaction) %>%
filter(transaction==1) %>%
group_by(person_id) %>%
summarise(recency=max(time))
recency
monetary_value <- transcript_profile %>%
group_by(person_id) %>%
slice(1) %>%
select(total_spend)
monetary_value
dim(profile)
dim(monetary_value)
dim(number_transaction)
dim(recency)
# merge rfm values and rename columns
merge(recency, number_transaction, by="person_id")
# merge rfm values and rename columns
right_join(recency, number_transaction, by="person_id", )
# merge rfm values and rename columns
rfm_table<-right_join(recency, number_transaction, by="person_id", )
inner_join(rfm_table, monterary_value, by="person_id")
inner_join(rfm_table, monetary_value, by="person_id")
rfm_table<-inner_join(rfm_table, monetary_value, by="person_id")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c("recency","frequency","monetary_value")
head(rfm_table)
# rename columns
colnames(rfm_table)<-c( "person_id","recency","frequency","monetary_value")
head(rfm_table)
# check minimum in recency
min(rfm_table$recency)
# check minimum in recency
min(drop_na(rfm_table$recency))
# check minimum in recency
rfm_table %>%
drop_na(recency)
# check minimum in recency
rfm_table %>%
drop_na(recency) %>%
summarise(min(recency))
is.na(rfm_table$recency)
rfm_table[is.na(rfm_table$recency)]
rfm_table$recency[is.na(rfm_table$recency)]
rfm_table$recency[is.na(rfm_table$recency)]<-0
rfm_table %>%
summarise(min(recency))
sum(is.na(rfm_table$recency))
str(rfm_table)
summary(rfm_table)
>>>>>>> ca0826a3204a9e8ba6426e41ab962e5cb8e608c1
>>>>>>> a84ccf2df5e141c87dcd4eb1ffb5bba2ea1d3649
