setwd("~/DABI_project")
################################################################################
#--------------------------------DABI PROJECT ----------------------------------
################################################################################
library(dplyr)
library(lubridate)
library(corrplot)
library(tidyverse)
library(magrittr)
library(GGally)
library(stringr)
library(Hmisc)
library(mltools)
data_wide <- read_csv("data_wide.csv")
################################################################################
## Adding New Variables to Wide Dataset
################################################################################
# 1. Engagement Rate Variables -------------------------------------------------
data_wide$offer_view_rate <- data_wide$tot_off_view / data_wide$tot_off_rec
summary(data_wide$offer_view_rate)
data_wide$offer_completion_rate <- data_wide$tot_off_comp / data_wide$tot_off_rec
summary(data_wide$offer_completion_rate)
data_wide$view_to_completion_rate <- data_wide$tot_off_comp / data_wide$tot_off_view
summary(data_wide$view_to_completion_rate)
# 2. Spending Behavior Variables ------------------------------------------------
data_wide$average_spend_per_transaction <- data_wide$tot_amount / data_wide$tot_trans
summary(data_wide$average_spend_per_transaction)
data_wide$spend_per_day <- data_wide$tot_amount / data_wide$tenure
summary(data_wide$spend_per_day)
# 3. Demographic Interaction Variables -----------------------------------------
# Categorizing age into groups
data_wide$age_group <- cut(data_wide$age,
breaks = c(-Inf, 25, 35, 45, 55, 65, Inf),
labels = c("<=25", "26-35", "36-45", "46-55", "56-65", "66+"))
summary(data_wide$age_group)
# Categorizing income into brackets --------------------------------------------
data_wide$income_bracket <- cut(data_wide$income,
breaks = c(-Inf, 32000, 64000, 96000, Inf),
labels = c("Low", "Medium", "High", "Very High"))
summary(data_wide$income_bracket)
# 4. Customer Loyalty Variables ------------------------------------------------
# Convert membership_start to tenure in years
data_wide$membership_duration_years <- as.numeric(difftime(Sys.Date(), data_wide$membership_start, units="days")) / 365.25
summary(data_wide$membership_duration_years)
# 5. Composite Engagement Score ------------------------------------------------
data_wide$composite_engagement_score <- (data_wide$offer_view_rate + data_wide$offer_completion_rate + data_wide$average_spend_per_transaction) / 3
summary(data_wide$composite_engagement_score)
# 6. Offer-Type Preference  ----------------------------------------------------
# Initialize columns for response rates
data_wide$bogo_response_rate <- 0
data_wide$discount_response_rate <- 0
data_wide$informational_response_rate <- 0
# # Bogo offers
bogo_rec_cols <- grep("off_rec_offer[0-9]+", names(data_wide), value = TRUE)
bogo_comp_cols <- grep("off_comp_offer[0-9]+", names(data_wide), value = TRUE)
data_wide$bogo_response_rate <- rowSums(data_wide[, bogo_comp_cols], na.rm = TRUE) / rowSums(data_wide[, bogo_rec_cols], na.rm = TRUE)
# Discount offers
discount_rec_cols <- grep("off_rec_offer[0-9]+", names(data_wide), value = TRUE)
discount_comp_cols <- grep("off_comp_offer[0-9]+", names(data_wide), value = TRUE)
data_wide$discount_response_rate <- rowSums(data_wide[, discount_comp_cols], na.rm = TRUE) / rowSums(data_wide[, discount_rec_cols], na.rm = TRUE)
# Informational offers
informational_rec_cols <- grep("off_rec_offer[0-9]+", names(data_wide), value = TRUE)
informational_comp_cols <- grep("off_comp_offer[0-9]+", names(data_wide), value = TRUE) # Note: Informational offers may not have a 'completed' status in some contexts
data_wide$informational_response_rate <- rowSums(data_wide[, informational_comp_cols], na.rm = TRUE) / rowSums(data_wide[, informational_rec_cols], na.rm = TRUE)
summary(data_wide$bogo_response_rate)
summary(data_wide$discount_response_rate)
summary(data_wide$informational_response_rate)
summary(data_wide$bogo_response_rate)
# 7. Channel Effectiveness -----------------------------------------------------
channels <- c("email", "mobile", "social", "web")
for(channel in channels) {
channel_cols <- grep(paste0(channel, "_offer"), names(data_wide), value = TRUE)
comp_cols <- grep("off_comp_offer", names(data_wide), value = TRUE)
total_channel_used <- rowSums(data_wide[, channel_cols], na.rm = TRUE)
total_completed <- rowSums(data_wide[, comp_cols], na.rm = TRUE)
# Calculating effectiveness for each channel
data_wide[[paste0(channel, "_comp_rate")]] <- total_completed / total_channel_used
}
summary(data_wide$email_comp_rate)
summary(data_wide$mobile_comp_rate)
summary(data_wide$social_comp_rate)
summary(data_wide$web_comp_rate)
summary(data_wide$email_comp_rate)
# 8. Promotion Interaction Rate ------------------------------------------------
data_wide$promotion_interaction_rate <- (data_wide$tot_off_view + data_wide$tot_off_comp) / data_wide$tot_off_rec
summary(data_wide$promotion_interaction_rate)
# 9. Promotion Conversion Rate -------------------------------------------------
data_wide$promotion_conversion_rate <- with(data_wide, ifelse(tot_off_view > 0, tot_off_comp / tot_off_view, 0))
summary(data_wide$promotion_conversion_rate)
# create an f score and a m score
factors<-10
data_wide["f_score"]<- factor(Hmisc::cut2(data_wide$tot_trans, cuts=c(quantile(data_wide$tot_trans, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
data_wide["m_score"]<- factor(Hmisc::cut2(data_wide$tot_amount, cuts=c(quantile(data_wide$tot_amount, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
# remove columns that don't add information on clients shopping
cluster_data<-cbind(data_wide[,1:45], data_wide[,177:194])
#one hot encoding gender
cluster_data["female"]<-ifelse(cluster_data$gender=="F", 1, 0)
cluster_data["male"]<-ifelse(cluster_data$gender=="M", 1, 0)
# remove gender
cluster_data$gender<- factor(cluster_data$gender)
cluster_data<-cluster_data %>% dplyr::select(-gender)
summary(cluster_data$gender)
ggplot(cluster_data, aes(age))+ # roughly normally distributed
geom_histogram()
# standardise age
cluster_data$age<-scale(cluster_data$age)
ggplot(cluster_data, aes(age))+ # roughly normally distributed
geom_histogram()
# remove membership start date
cluster_data<-cluster_data %>% dplyr::select(-membership_start)
# plot income
ggplot(cluster_data, aes(log(income)))+ # roughly normally distributed
geom_histogram()
# scale log income
cluster_data["log_income"]<-scale(log(cluster_data$income))
ggplot(cluster_data, aes(log_income))+ # roughly normally distributed
geom_histogram()
# plot tenure
ggplot(cluster_data, aes(tenure))+ # roughly normally distributed
geom_histogram()
ggpairs(cluster_data %>% dplyr::select(age,log_income,tenure, tot_off_rec, tot_off_view))
ggplot(data=cluster_data, aes(y=tenure))+
geom_boxplot(aes(fill=income_bracket))
ggplot(data=cluster_data, aes(y=tenure))+
geom_boxplot(aes(fill=m_score))
ggplot(data=cluster_data, aes(y=tenure))+
geom_boxplot(aes(fill=f_score))
ggplot(data=cluster_data, aes(y=ave_amount))+
geom_boxplot(aes(fill=tenure_factor))
# create standardise tot offer viewed
ggplot(cluster_data, aes(tot_off_view))+
geom_histogram()
cluster_data$tot_off_view<- scale(cluster_data$tot_off_view)
# create standardise tot offer completed
ggplot(cluster_data, aes(tot_off_comp))+
geom_histogram()
ggplot(cluster_data %>% filter(tot_off_rec==max(tot_off_rec)), aes(tot_off_comp))+
geom_histogram()
cluster_data$tot_off_comp<- scale(cluster_data$tot_off_comp)
ggplot(cluster_data, aes(tot_off_comp))+
geom_histogram()
#
cluster_data$tot_amount<-scale(cluster_data$tot_amount)
cluster_data$tot_trans<-scale(cluster_data$tot_trans)
cluster_data$ave_amount<-scale(cluster_data$ave_amount)
kprot_data<-cluster_data %>% select(age,gender,log_income, f_score,m_score, tot_trans,tot_amount,
ave_amount,bogo_response_rate, email_comp_rate, mobile_comp_rate, social_comp_rate,
web_comp_rate, promotion_interaction_rate, promotion_conversion_rate) %>% drop_na()
k1<-kproto(kprot_data, k=3)
library(clustMixType)
k1<-kproto(kprot_data, k=3)
kprot_data["cluster"]<-k1$cluster
k1<-kproto(kprot_data, k=3)
ggplot(cluster_data, aes(tot_off_comp))+
geom_histogram()
#
cluster_data$tot_amount<-scale(cluster_data$tot_amount)
cluster_data$tot_trans<-scale(cluster_data$tot_trans)
cluster_data$ave_amount<-scale(cluster_data$ave_amount)
kprot_data<-cluster_data %>% select(age,gender,log_income, f_score,m_score, tot_trans,tot_amount,
ave_amount,bogo_response_rate, email_comp_rate, mobile_comp_rate, social_comp_rate,
web_comp_rate, promotion_interaction_rate, promotion_conversion_rate) %>% drop_na()
colnames(cluster_data)
library(clustMixType)
k1<-kproto(kprot_data, k=3)
kprot_data<-cluster_data %>% select(age,gender,log_income, f_score,m_score, tot_trans,tot_amount,
ave_amount,bogo_response_rate, email_comp_rate, mobile_comp_rate, social_comp_rate,
web_comp_rate, promotion_interaction_rate, promotion_conversion_rate) %>% drop_na()
# create an f score and a m score
factors<-10
data_wide["f_score"]<- factor(Hmisc::cut2(data_wide$tot_trans, cuts=c(quantile(data_wide$tot_trans, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
data_wide["m_score"]<- factor(Hmisc::cut2(data_wide$tot_amount, cuts=c(quantile(data_wide$tot_amount, probs = seq(0, 1, by = 1/factors))), g = factors), labels = c(1:factors))
# remove columns that don't add information on clients shopping
cluster_data<-cbind(data_wide[,1:45], data_wide[,177:194])
#one hot encoding gender
cluster_data["female"]<-ifelse(cluster_data$gender=="F", 1, 0)
cluster_data["male"]<-ifelse(cluster_data$gender=="M", 1, 0)
# remove gender
cluster_data$gender<- factor(cluster_data$gender)
#cluster_data<-cluster_data %>% dplyr::select(-gender)
summary(cluster_data$gender)
ggplot(cluster_data, aes(age))+ # roughly normally distributed
geom_histogram()
# standardise age
cluster_data$age<-scale(cluster_data$age)
ggplot(cluster_data, aes(age))+ # roughly normally distributed
geom_histogram()
# remove membership start date
cluster_data<-cluster_data %>% dplyr::select(-membership_start)
# plot income
ggplot(cluster_data, aes(log(income)))+ # roughly normally distributed
geom_histogram()
# scale log income
cluster_data["log_income"]<-scale(log(cluster_data$income))
ggplot(cluster_data, aes(log_income))+ # roughly normally distributed
geom_histogram()
# plot tenure
ggplot(cluster_data, aes(tenure))+ # roughly normally distributed
geom_histogram()
ggpairs(cluster_data %>% dplyr::select(age,log_income,tenure, tot_off_rec, tot_off_view))
ggplot(data=cluster_data, aes(y=tenure))+
geom_boxplot(aes(fill=income_bracket))
ggplot(data=cluster_data, aes(y=tenure))+
geom_boxplot(aes(fill=m_score))
ggplot(data=cluster_data, aes(y=tenure))+
geom_boxplot(aes(fill=f_score))
ggplot(data=cluster_data, aes(y=ave_amount))+
geom_boxplot(aes(fill=tenure_factor))
cluster_data$tot_off_view<- scale(cluster_data$tot_off_view)
# create standardise tot offer completed
ggplot(cluster_data, aes(tot_off_comp))+
geom_histogram()
ggplot(cluster_data %>% filter(tot_off_rec==max(tot_off_rec)), aes(tot_off_comp))+
geom_histogram()
cluster_data$tot_off_comp<- scale(cluster_data$tot_off_comp)
ggplot(cluster_data, aes(tot_off_comp))+
geom_histogram()
#
cluster_data$tot_amount<-scale(cluster_data$tot_amount)
cluster_data$tot_trans<-scale(cluster_data$tot_trans)
cluster_data$ave_amount<-scale(cluster_data$ave_amount)
kprot_data<-cluster_data %>% select(age,gender,log_income, f_score,m_score, tot_trans,tot_amount,
ave_amount,bogo_response_rate, email_comp_rate, mobile_comp_rate, social_comp_rate,
web_comp_rate, promotion_interaction_rate, promotion_conversion_rate) %>% drop_na()
colnames(cluster_data)
library(clustMixType)
k1<-kproto(kprot_data, k=3)
kprot_data["cluster"]<-k1$cluster
k1$withinss
k1$tot.withinss
wss<-numeric(c(15,3))
wss<-array(c(15,3))
wss
wss<-array(rep(0,45), dim=c(15,3))
wss
for(k in 1:15){
k1<-kproto(kprot_data, k=k)
totwss[k]<-k1$tot.withinss
wss[k,]<-k1$withinss
}
totwss<-numeric(15)
wss<-array(rep(0,45), dim=c(15,3))
wss
for(k in 1:15){
k1<-kproto(kprot_data, k=k)
totwss[k]<-k1$tot.withinss
wss[k,]<-k1$withinss
}
k1$withinss
wss<-array(rep(0,30), dim=c(15,2))
wss
for(k in 1:15){
k1<-kproto(kprot_data, k=k)
totwss[k]<-k1$tot.withinss
wss[k,]<-k1$withinss
}
for(k in 1:15){
k1<-kproto(kprot_data, k=k)
totwss[k]<-k1$tot.withinss
}
plot(1:15, totwss, type="b")
k1<-kproto(kprot_data, k=10)
kprot_data["cluster"]<-k1$cluster
k1$withinss
k1$tot.withinss
kprot_data %>% group_by(cluster) %>%
summarise(mean(age), mean(log_income), mean(tot_amount), mean(tot_trans), mean(bogo_response_rate), mean(social_comp_rate),mean(promotion_interaction_rate))
kprot_data %>% group_by(cluster) %>%
summarise( mean(bogo_response_rate), mean(social_comp_rate),mean(promotion_interaction_rate))
kprot_data %>% group_by(cluster) %>% count()
table(kprot_data$f_score, k1$cluster)
table(kprot_data$m_score, k1$cluster)
kprot_data %>% group_by(cluster) %>%
summarise(mean(age), mean(log_income), mean(tot_amount), mean(tot_trans), mean(bogo_response_rate), mean(social_comp_rate),mean(promotion_interaction_rate))
silhouette_kproto(k1)
library(clustMixType)
silhouette_kproto(k1)
summary(k1)
plot(k1)
stability_kproto(k1)
